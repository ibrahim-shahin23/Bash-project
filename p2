#! /usr/bin/bash 
# CreateTable ListTables DropTable InsertintoTable SelectFromTable DeleteFromTable UpdateTable
				
				select var in CreateTable ListTables DropTable InsertintoTable SelectFromTable DeleteFromTable UpdateTable
				do
				case $var in
					"CreateTable")
						read -p "Enter a new Table name: " Tb_name
						if [[ -z $Tb_name ]]
						then
							echo invalid Table name
						else
							if [ -e "$Tb_name" ]
							then 
								echo $Tb_name Table is already exist
							else
								read -p "please enter columns numbers: " colNum
								flag=0
								for ((i=0;i<$colNum;i++))
								do
									line=""
									read -p "please Enter col number $((i+1)): " colData
									line+=$colData:
									read -p "please Enter Datatype of Col $colData: " datatypeCol
									line+=$datatypeCol:
									if [[ $flag -eq 0 ]]
									then
										read -p "Do you want to make $colData primary key: " pkCheck
										if [[ $pkCheck =~ ^([yY][eE][sS]|[Yy]) ]] 
										then
											line+=pk
											flag=1
										fi
									fi
									echo $line >> .$TBName-metadata
								done
								
							
								touch $TBName
								echo "Table is created Successfully"
							fi
						fi
		
					;;
					"ListTables")
						ls
					;;
					"DropTable")
						read -p "Please Enter a Table to remove: " TBname
						if [[ -z $TBname ]]
						then
							echo invalid Table name
						else
							if [ -e "$TBname" ]
							then 
								rm -r "$TBname"
								echo Table $TBname is removed
							else
								echo $TBname Table doesn\'t exist
							fi
						fi
					;;
					"InsertintoTable")
						    read -p "Please enter Table Name: " TBName
						    if [[ -z $TBName ]]; then
							echo "Invalid Table Name"
						    else
							if [[ -e $TBName && -e .$TBName-metadata ]]; then
							    columnSize=$(wc -l < .$TBName-metadata)
							    lineee=""
							    primaryKey=""
							    for ((i=0; i<columnSize; i++)); do
								line=$(sed -n "$((i+1))p" .$TBName-metadata)
								colName=$(echo $line | cut -d: -f1)
								colType=$(echo $line | cut -d: -f2)
								colPkCheck=$(echo $line | cut -d: -f3)
								read -p "Please enter value for column '$colName': " val

								# Data type validation
								if [[ "$colType" == "int" && ! "$val" =~ ^[0-9]+$ ]]; then
								    echo "Error: Column '$colName' expects an integer value."
								    return  # Exit the function in case of invalid data
								elif [[ "$colType" == "string" && ! "$val" =~ ^[a-zA-Z]+$ ]]; then
								    echo "Error: Column '$colName' expects a string value."
								    return  # Exit the function in case of invalid data
								elif [[ "$colPkCheck" == "pk" ]]; then
								    if grep -q "^$val," "$TBName"; then
									echo "Error: Primary key constraint violated. Value '$val' already exists."
									return  # Exit the function in case of primary key violation
								    fi
								fi

								lineee+="$val"
								if [[ $i -lt $((columnSize-1)) ]]; then
								    lineee+=","
								fi
							    done
							    echo "$lineee" >> $TBName
							    echo "Data is inserted"
							else
							    echo "Table or metadata file does not exist"
							fi
						    fi
						;;
					"SelectFromTable")
						    read -p "Please enter table name to select from: " TBname
						    if [[ -z $TBname ]]
						    then
							echo "Invalid Table name"
						    else
							if [ -e "$TBname" ]
							then
							    # Read metadata to get column names and data types
							    echo "Select operation on table $TBname:"
							    echo "1. Display all columns"
							    echo "2. Display specific columns"
							    echo "3. Filter rows based on conditions"
							    read -p "Choose an option (1-3): " option
							    
							    case $option in
							    1)
								# Display all data in the table
								echo "Displaying all rows from $TBname:"
								cat "$TBname"
								;;
							    2)
								# Display specific columns
								echo "Available columns:"
								columnSize=$(wc -l < .$TBname-metadata)
								for ((i=1; i<=columnSize; i++))
								do
								    colName=$(sed -n "$((i))p" .$TBname-metadata | cut -d: -f1)
								    echo "$i) $colName"
								done
								read -p "Enter the column numbers to display (comma separated): " cols
								# Display the selected columns
								cat "$TBname" | cut -d: -f$cols
								;;
							    3)
								# Filter rows based on a condition
								read -p "Enter the column number to filter: " filterCol
								read -p "Enter the value to filter by: " filterVal
								echo "Rows where column $filterCol has value $filterVal:"
								colIndex=$((filterCol-1))
								# Using awk for filtering
								awk -F: -v col="$colIndex" -v value="$filterVal" '$col == value' "$TBname"
								;;
							    *)
								echo "Invalid option"
								;;
							    esac
							else
							    echo "Table $TBname doesn't exist"
							fi
						    fi  
						;;
						
						*)
						    echo "Invalid option selected"
						;;

					esac
					
					
				done
				#################################################################################################
