#!/usr/bin/bash

# DBMS initialization

if [ ! -d "~/Downloads/bash/Bash-project/DBMS" ]; then
    mkdir -p ~/Downloads/bash/Bash-project/DBMS
fi

cd ~/Downloads/bash/Bash-project/DBMS
echo "DBMS is running..."

# Main Menu: CreateDatabase, SelectDatabase, ListDatabases, DropDatabase
select var in CreateDatabase SelectDatabase ListDatabases DropDatabase; do
    case $var in
        "CreateDatabase")
            read -p "Enter a new Database name: " DB_name
            if [[ -z $DB_name ]]; then
                echo "Invalid DB name"
            else
                if [ -e "$DB_name" ]; then
                    echo "$DB_name Database already exists"
                else
                    mkdir "$DB_name"
                    echo "$DB_name Database created successfully"
                fi
            fi
        ;;
        
        "SelectDatabase")
            read -p "Please Enter your Database name: " DB_name
            if [[ -z $DB_name ]]; then
                echo "Invalid DB name"
            else
                if [ -e "$DB_name" ]; then
                    cd "$DB_name"
                    echo "Connected to database $DB_name"

                    # Inside database menu: CreateTable, ListTables, DropTable, InsertIntoTable, SelectFromTable, DeleteFromTable, UpdateTable
                    select var in CreateTable ListTables DropTable InsertIntoTable SelectFromTable DeleteFromTable UpdateTable; do
                        case $var in
                            "CreateTable")
                                read -p "Enter a new Table name: " Tb_name
                                if [[ -z $Tb_name ]]; then
                                    echo "Invalid Table name"
                                else
                                    if [ -e "$Tb_name" ]; then
                                        echo "$Tb_name Table already exists"
                                    else
                                        read -p "Please enter number of columns: " colNum
                                        flag=0
                                        for ((i=0; i<$colNum; i++)); do
                                            line=""
                                            read -p "Please Enter column $((i+1)) name: " colData
                                            line+=$colData:
                                            read -p "Please Enter Datatype of column $colData: " datatypeCol
                                            line+=$datatypeCol:
                                            if [[ $flag -eq 0 ]]; then
                                                read -p "Do you want to make $colData a primary key? (y/n): " pkCheck
                                                if [[ $pkCheck =~ ^([yY][eE][sS]|[Yy]) ]]; then
                                                    line+=pk
                                                    flag=1
                                                fi
                                            fi
                                            echo $line >> .$Tb_name-metadata
                                        done

                                        touch $Tb_name
                                        echo "Table $Tb_name created successfully"
                                    fi
                                fi
                            ;;

                            "ListTables")
                                ls
                            ;;

                            "DropTable")
                                read -p "Please Enter a Table to remove: " TBname
                                if [[ -z $TBname ]]; then
                                    echo "Invalid Table name"
                                else
                                    if [ -e "$TBname" ]; then
                                        rm "$TBname"
                                        rm .$TBname-metadata
                                        echo "Table $TBname removed successfully"
                                    else
                                        echo "$TBname Table doesn't exist"
                                    fi
                                fi
                            ;;

                            "InsertIntoTable")
                                read -p "Please enter Table Name: " TBName
                                if [[ -z $TBName ]]; then
                                    echo "Invalid Table Name"
                                else
                                    if [[ -e $TBName && -e .$TBName-metadata ]]; then
                                        columnSize=$(wc -l < .$TBName-metadata)
                                        lineee=""
                                        primaryKey=""
                                        for ((i=0; i<columnSize; i++)); do
                                            line=$(sed -n "$((i+1))p" .$TBName-metadata)
                                            colName=$(echo $line | cut -d: -f1)
                                            colType=$(echo $line | cut -d: -f2)
                                            colPkCheck=$(echo $line | cut -d: -f3)
                                            read -p "Please enter value for column '$colName': " val

                                            # Data type validation
                                            if [[ "$colType" == "int" && ! "$val" =~ ^[0-9]+$ ]]; then
                                                echo "Error: Column '$colName' expects an integer value."
                                                continue
                                            elif [[ "$colType" == "string" && ! "$val" =~ ^[a-zA-Z]+$ ]]; then
                                                echo "Error: Column '$colName' expects a string value."
                                                continue
                                            elif [[ "$colPkCheck" == "pk" ]]; then
                                                if grep -q "^$val:" "$TBName"; then
                                                    echo "Error: Primary key constraint violated. Value '$val' already exists."
                                                    continue
                                                fi
                                            fi

                                            lineee+="$val"
                                            if [[ $i -lt $((columnSize-1)) ]]; then
                                                lineee+=":"
                                            fi
                                        done
                                        echo "$lineee" >> $TBName
                                        echo "Data inserted successfully"
                                    else
                                        echo "Table or metadata file does not exist"
                                    fi
                                fi
                            ;;

                            "SelectFromTable")
                                read -p "Please enter Table name to select from: " TBname
                                if [[ -z $TBname ]]; then
                                    echo "Invalid Table name"
                                else
                                    if [ -e "$TBname" ]; then
                                        echo "Select operation on table $TBname:"
                                        echo "1. Display all columns"
                                        echo "2. Display specific columns"
                                        echo "3. Filter rows based on conditions"
                                        read -p "Choose an option (1-3): " option
                                        
                                        case $option in
                                            1)
                                                cat "$TBname"
                                            ;;
                                            2)
                                                columnSize=$(wc -l < .$TBname-metadata)
                                                for ((i=1; i<=columnSize; i++)); do
                                                    colName=$(sed -n "$((i))p" .$TBname-metadata | cut -d: -f1)
                                                    echo "$i) $colName"
                                                done
                                                read -p "Enter the column numbers to display (comma separated): " cols
                                                cut -d: -f$cols "$TBname"
                                            ;;
                                            3)
                                                read -p "Enter the column number to filter: " filterCol
                                                read -p "Enter the value to filter by: " filterVal
                                                colIndex=$((filterCol))  # Corrected index
                                                awk -F: -v col="$colIndex" -v value="$filterVal" '$col == value' "$TBname"
                                            ;;
                                            *)
                                                echo "Invalid option"
                                            ;;
                                        esac
                                    else
                                        echo "$TBname Table doesn't exist"
                                    fi
                                fi
                            ;;

                            "DeleteFromTable")
					    read -p "Please enter Table name to delete from: " TBname
					    if [[ -z $TBname ]]; then
						echo "Invalid Table name"
					    else
						if [ -e "$TBname" ]; then
						    echo "Delete operation on table $TBname:"
						    echo "1. Delete rows based on condition"
						    read -p "Choose an option (1): " option
						    
						    case $option in
							1)
							    read -p "Enter the column number to filter for deletion: " filterCol
							    read -p "Enter the value to delete: " filterVal
							    colIndex=$((filterCol))  # Corrected index
							    # حذف الصفوف التي تطابق الشرط
							    awk -F: -v col="$colIndex" -v value="$filterVal" '$col != value' "$TBname" > tempFile && mv tempFile "$TBname"
							    echo "Rows deleted successfully."
							    ;;
							*)
							    echo "Invalid option"
							    ;;
						    esac
						else
						    echo "$TBname Table doesn't exist"
						fi
					    fi
					;;

                            "UpdateTable")
				    read -p "Please enter Table name to update: " TBname
				    if [[ -z $TBname ]]; then
					echo "Invalid Table name"
				    else
					if [ -e "$TBname" ]; then
					    echo "Update operation on table $TBname:"
					    echo "1. Update a specific column based on condition"
					    read -p "Choose an option (1): " option
					    
					    case $option in
						1)
						    read -p "Enter the column number to update: " updateCol
						    read -p "Enter the value to update: " newValue
						    read -p "Enter the column number to filter for update: " filterCol
						    read -p "Enter the value to filter by: " filterVal
						    colIndex=$((filterCol))  # Corrected index
						    updateIndex=$((updateCol))
						    
						    # استخدام awk لتحديث القيم بناءً على الشرط
						    awk -F: -v filterCol="$colIndex" -v filterVal="$filterVal" -v updateCol="$updateIndex" -v newValue="$newValue" \
						    'BEGIN {OFS=":"} $filterCol == filterVal {$updateCol = newValue} {print $0}' "$TBname" > tempFile && mv tempFile "$TBname"
						    
						    echo "Table updated successfully."
						    ;;
						*)
						    echo "Invalid option"
						    ;;
					    esac
					else
					    echo "$TBname Table doesn't exist"
					fi
				    fi
				;;
                            
                        esac
                    done
                else
                    echo "$DB_name Database doesn't exist"
                fi
            fi
        ;;
        
        "ListDatabases")
            ls
        ;;
        
        "DropDatabase")
            read -p "Please Enter a Database to remove: " DB_name
            if [[ -z $DB_name ]]; then
                echo "Invalid DB name"
            else
                if [ -e "$DB_name" ]; then
                    rm -r "$DB_name"
                    echo "Database $DB_name removed successfully"
                else
                    echo "$DB_name Database doesn't exist"
                fi
            fi
        ;;
        
        *)
            echo "Invalid input"
        ;;
    esac
done

